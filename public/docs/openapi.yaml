openapi: 3.0.3
info:
    title: 'One minute poll API Documentation'
    description: 'One minute poll API Documentation'
    version: 1.0.0
servers:
    -
        url: 'http://poll.loc'
paths:
    /api/login:
        post:
            summary: 'Handle a login request to the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: kgrimes@example.net
                                secret:
                                    type: string
                                    description: ''
                                    example: {  }
                                password:
                                    type: string
                                    description: ''
                                    example: aut
                            required:
                                - email
                                - password
            security: []
    /api/codeLogin:
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                code:
                                    type: string
                                    description: ''
                                    example: aut
                            required:
                                - code
            security: []
    /api/logout:
        post:
            summary: 'Log the user out of the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            security: []
        get:
            summary: 'Log the user out of the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: []
                                    message: 'Successful Logout'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [] }
                                    message: { type: string, example: 'Successful Logout' }
            tags:
                - Auth
            security: []
    /api/register:
        post:
            summary: 'Handle a registration request for the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                first_name:
                                    type: string
                                    description: ''
                                    example: et
                                last_name:
                                    type: string
                                    description: ''
                                    example: qui
                                company_name:
                                    type: string
                                    description: ''
                                    example: sequi
                                company_phone:
                                    type: string
                                    description: ''
                                    example: labore
                                company_description:
                                    type: string
                                    description: ''
                                    example: itaque
                                has2fa:
                                    type: boolean
                                    description: ''
                                    example: false
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: rogahn.mona@example.net
                                password:
                                    type: string
                                    description: ''
                                    example: voluptas
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: in
                            required:
                                - first_name
                                - last_name
                                - company_name
                                - company_phone
                                - email
                                - password
                                - password_confirmation
            security: []
    '/api/password/reset/{token}':
        get:
            summary: 'Display the password reset view for the given token.'
            description: 'If no token is present, display the link request form.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Whoops, looks like something went wrong'
                                    status: 500
                                properties:
                                    message: { type: string, example: 'Whoops, looks like something went wrong' }
                                    status: { type: integer, example: 500 }
            tags:
                - Auth
            security: []
        parameters:
            -
                in: path
                name: token
                description: ''
                example: facere
                required: true
                schema:
                    type: string
    /api/password/confirm:
        post:
            summary: 'Confirm the given user''s password.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            security: []
    '/api/email/verify/{id}/{hash}':
        get:
            summary: 'Mark the authenticated user''s email address as verified.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Auth
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: adipisci
                required: true
                schema:
                    type: string
            -
                in: path
                name: hash
                description: ''
                example: tempore
                required: true
                schema:
                    type: string
    /api/email/resend:
        post:
            summary: 'Resend the email verification notification.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            security: []
    /api/password/sendEmailLink:
        post:
            summary: 'Send a reset link to the given user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: bednar.lawrence@example.org
                                base_url:
                                    type: string
                                    description: ''
                                    example: architecto
                            required:
                                - email
                                - base_url
            security: []
    /api/password/resetUser:
        post:
            summary: 'Reset the given user''s password.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                token:
                                    type: string
                                    description: ''
                                    example: dolor
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: dion45@example.org
                                password:
                                    type: string
                                    description: ''
                                    example: nostrum
                            required:
                                - token
                                - email
                                - password
            security: []
    /api/registerInvite:
        post:
            summary: 'This is used to register an invited user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                company_id:
                                    type: string
                                    description: ''
                                    example: quia
                                user_id:
                                    type: string
                                    description: ''
                                    example: {  }
                                is_user:
                                    type: boolean
                                    description: ''
                                    example: false
                                name:
                                    type: string
                                    description: ''
                                    example: aut
                                has2fa:
                                    type: boolean
                                    description: ''
                                    example: false
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: ncasper@example.org
                                password:
                                    type: string
                                    description: ''
                                    example: ut
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: nostrum
                            required:
                                - company_id
                                - is_user
            security: []
    /api/password/change:
        post:
            summary: 'Change user''s password.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: bgreenholt@example.com
                                old_password:
                                    type: string
                                    description: ''
                                    example: sunt
                                password:
                                    type: string
                                    description: ''
                                    example: non
                            required:
                                - email
                                - old_password
                                - password
            security: []
    /api/categories:
        get:
            summary: 'Display a listing of the Category.'
            description: 'GET|HEAD /categories'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, name: 'General Opinion', created_at: null, updated_at: null }, { id: 2, name: Lifestyle, created_at: null, updated_at: null }, { id: 3, name: Politics, created_at: null, updated_at: null }, { id: 4, name: Entertainment, created_at: null, updated_at: null }, { id: 5, name: Sports, created_at: null, updated_at: null }, { id: 6, name: Technology, created_at: null, updated_at: null }]
                                    message: 'Categories retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, name: 'General Opinion', created_at: null, updated_at: null }, { id: 2, name: Lifestyle, created_at: null, updated_at: null }, { id: 3, name: Politics, created_at: null, updated_at: null }, { id: 4, name: Entertainment, created_at: null, updated_at: null }, { id: 5, name: Sports, created_at: null, updated_at: null }, { id: 6, name: Technology, created_at: null, updated_at: null }], items: { type: object } }
                                    message: { type: string, example: 'Categories retrieved successfully' }
            tags:
                - Category
            security: []
        post:
            summary: 'Store a newly created Category in storage.'
            description: 'POST /categories'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Category
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: quo
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
    '/api/categories/{category}':
        get:
            summary: 'Display the specified Category.'
            description: 'GET|HEAD /categories/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Category not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Category not found' }
            tags:
                - Category
            security: []
        put:
            summary: 'Update the specified Category in storage.'
            description: 'PUT/PATCH /categories/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Category
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: magni
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
        delete:
            summary: 'Remove the specified Category from storage.'
            description: 'DELETE /categories/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Category
            security: []
        parameters:
            -
                in: path
                name: category
                description: ''
                example: veritatis
                required: true
                schema:
                    type: string
    '/counters/increment/{counter}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Whoops, looks like something went wrong'
                                    status: 500
                                properties:
                                    message: { type: string, example: 'Whoops, looks like something went wrong' }
                                    status: { type: integer, example: 500 }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: counter
                description: ''
                example: labore
                required: true
                schema:
                    type: string
    '/counters/decrement/{counter}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Whoops, looks like something went wrong'
                                    status: 500
                                properties:
                                    message: { type: string, example: 'Whoops, looks like something went wrong' }
                                    status: { type: integer, example: 500 }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: counter
                description: ''
                example: earum
                required: true
                schema:
                    type: string
    '/counters/counterable/increment/{counterable}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                400:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    'counter Not Found': true
                                properties:
                                    'counter Not Found': { type: boolean, example: true }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: counterable
                description: ''
                example: sint
                required: true
                schema:
                    type: string
    '/counters/counterable/decrement/{counterable}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                400:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    'counter Not Found': true
                                properties:
                                    'counter Not Found': { type: boolean, example: true }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: counterable
                description: ''
                example: enim
                required: true
                schema:
                    type: string
    /counters:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: '<h3>Hello From Counters package</h3>'
            tags:
                - Endpoints
            security: []
    /oauth/authorize:
        get:
            summary: 'Authorize a client to access the user''s account.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Approve the authorization request.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        delete:
            summary: 'Deny the authorization request.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /oauth/token:
        post:
            summary: 'Authorize a client to access the user''s account.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /oauth/tokens:
        get:
            summary: 'Get all of the authorized tokens for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    '/oauth/tokens/{token_id}':
        delete:
            summary: 'Delete the given token.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: token_id
                description: ''
                example: aperiam
                required: true
                schema:
                    type: string
    /oauth/token/refresh:
        post:
            summary: 'Get a fresh transient token cookie for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /oauth/clients:
        get:
            summary: 'Get all of the clients for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Store a new client.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    '/oauth/clients/{client_id}':
        put:
            summary: 'Update the given client.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        delete:
            summary: 'Delete the given client.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: client_id
                description: ''
                example: qui
                required: true
                schema:
                    type: string
    /oauth/scopes:
        get:
            summary: 'Get all of the available scopes for the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /oauth/personal-access-tokens:
        get:
            summary: 'Get all of the personal access tokens for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Create a new personal access token for the user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    '/oauth/personal-access-tokens/{token_id}':
        delete:
            summary: 'Delete the given token.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: token_id
                description: ''
                example: et
                required: true
                schema:
                    type: string
    /api/user:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /home:
        get:
            summary: 'Show the application dashboard.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /email/verify:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    '/email/verify/{id}/{hash}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: consequatur
                required: true
                schema:
                    type: string
            -
                in: path
                name: hash
                description: ''
                example: dolorum
                required: true
                schema:
                    type: string
    /email/verification-notification:
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /api/polls/search:
        post:
            summary: 'By Branch.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: alias
                            required:
                                - name
            security: []
    /api/polls/mine:
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            security: []
    /api/polls:
        get:
            summary: 'Display a listing of the Poll.'
            description: 'GET|HEAD /polls'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, counters: null, title: A_E, user: null, pollOptions: [{ id: 1, poll_id: 1, name: A, value: qq, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 8 }, { id: 2, poll_id: 1, name: B, value: ww, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 9 }, { id: 3, poll_id: 1, name: C, value: ee, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 10 }, { id: 4, poll_id: 1, name: D, value: bb, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 11 }], votes: null, pollValue: null, pollType: { id: 3, name: 'A - E Options', created_at: null, updated_at: null, value_vote: [{ id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }] }, valueVote: [{ id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }], url: 'http://poll.loc/storage/15/ac62631a-15f3-4b2f-8fc4-7769353b76e8.jpeg', code: QC9LQ18HX9, category: { id: 1, name: 'General Opinion', created_at: null, updated_at: null }, user_id: null, poll_type_id: 3, open_to_everyone: 0, question: A_E, close_date: '2021-08-01T00:00:00.000000Z', created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 2, counters: null, title: Star, user: null, pollOptions: [], votes: null, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc/storage/16/3cb60f8a-424f-4dd8-89b6-61720b48a248.png', code: 7K9XXT832L, category: { id: 3, name: Politics, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: Star, close_date: '2021-08-01T00:00:00.000000Z', created_at: '2021-07-31T23:24:55.000000Z', updated_at: '2021-07-31T23:24:55.000000Z' }, { id: 3, counters: null, title: '111', user: null, pollOptions: [], votes: null, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc/storage/17/ddf84dcd-2811-41ef-bc19-28db621a1b57.jpeg', code: 2WY4VPEV1L, category: { id: 4, name: Entertainment, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: '111', close_date: '2021-08-02T00:00:00.000000Z', created_at: '2021-07-31T23:26:00.000000Z', updated_at: '2021-07-31T23:26:00.000000Z' }, { id: 4, counters: null, title: '222', user: null, pollOptions: [], votes: null, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc/storage/18/6a5e55fa-a5e2-4b0f-aeef-fafa93f72961.jpeg', code: 6TK26KEWVQ, category: { id: 4, name: Entertainment, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: '222', close_date: '2021-08-02T00:00:00.000000Z', created_at: '2021-07-31T23:26:44.000000Z', updated_at: '2021-07-31T23:26:44.000000Z' }, { id: 8, counters: { counterable_id: 8, counter_id: 1, counterable_type: App\Models\Poll, value: 4, id: 2 }, title: '333', user: null, pollOptions: [{ id: 5, poll_id: 8, name: '1', value: '1', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 3 }, { id: 6, poll_id: 8, name: '2', value: '2', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 4 }, { id: 7, poll_id: 8, name: '3', value: '3', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 5 }, { id: 8, poll_id: 8, name: '4', value: '4', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 6 }, { id: 9, poll_id: 8, name: '5', value: '5', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 7 }], votes: { id: 1, poll_id: 8, created_at: '2021-07-31T23:53:11.000000Z', updated_at: '2021-07-31T23:53:11.000000Z', uuid: 8b43136c-165b-4b05-8332-45b8b326ed0e, user_id: null, value: '3', poll_value: null }, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc:82/storage/22/cb22ff74-136d-413f-a9fa-182b803c6f06.jpeg', code: 8X76N515LN, category: { id: 4, name: Entertainment, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: '333', close_date: '2021-08-02T00:00:00.000000Z', created_at: '2021-07-31T23:28:52.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }]
                                    message: 'Polls retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, counters: null, title: A_E, user: null, pollOptions: [{ id: 1, poll_id: 1, name: A, value: qq, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 8 }, { id: 2, poll_id: 1, name: B, value: ww, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 9 }, { id: 3, poll_id: 1, name: C, value: ee, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 10 }, { id: 4, poll_id: 1, name: D, value: bb, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z', vote_value_id: 11 }], votes: null, pollValue: null, pollType: { id: 3, name: 'A - E Options', created_at: null, updated_at: null, value_vote: [{ id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }] }, valueVote: [{ id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }], url: 'http://poll.loc/storage/15/ac62631a-15f3-4b2f-8fc4-7769353b76e8.jpeg', code: QC9LQ18HX9, category: { id: 1, name: 'General Opinion', created_at: null, updated_at: null }, user_id: null, poll_type_id: 3, open_to_everyone: 0, question: A_E, close_date: '2021-08-01T00:00:00.000000Z', created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 2, counters: null, title: Star, user: null, pollOptions: [], votes: null, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc/storage/16/3cb60f8a-424f-4dd8-89b6-61720b48a248.png', code: 7K9XXT832L, category: { id: 3, name: Politics, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: Star, close_date: '2021-08-01T00:00:00.000000Z', created_at: '2021-07-31T23:24:55.000000Z', updated_at: '2021-07-31T23:24:55.000000Z' }, { id: 3, counters: null, title: '111', user: null, pollOptions: [], votes: null, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc/storage/17/ddf84dcd-2811-41ef-bc19-28db621a1b57.jpeg', code: 2WY4VPEV1L, category: { id: 4, name: Entertainment, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: '111', close_date: '2021-08-02T00:00:00.000000Z', created_at: '2021-07-31T23:26:00.000000Z', updated_at: '2021-07-31T23:26:00.000000Z' }, { id: 4, counters: null, title: '222', user: null, pollOptions: [], votes: null, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc/storage/18/6a5e55fa-a5e2-4b0f-aeef-fafa93f72961.jpeg', code: 6TK26KEWVQ, category: { id: 4, name: Entertainment, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: '222', close_date: '2021-08-02T00:00:00.000000Z', created_at: '2021-07-31T23:26:44.000000Z', updated_at: '2021-07-31T23:26:44.000000Z' }, { id: 8, counters: { counterable_id: 8, counter_id: 1, counterable_type: App\Models\Poll, value: 4, id: 2 }, title: '333', user: null, pollOptions: [{ id: 5, poll_id: 8, name: '1', value: '1', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 3 }, { id: 6, poll_id: 8, name: '2', value: '2', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 4 }, { id: 7, poll_id: 8, name: '3', value: '3', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 5 }, { id: 8, poll_id: 8, name: '4', value: '4', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 6 }, { id: 9, poll_id: 8, name: '5', value: '5', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z', vote_value_id: 7 }], votes: { id: 1, poll_id: 8, created_at: '2021-07-31T23:53:11.000000Z', updated_at: '2021-07-31T23:53:11.000000Z', uuid: 8b43136c-165b-4b05-8332-45b8b326ed0e, user_id: null, value: '3', poll_value: null }, pollValue: null, pollType: { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null, value_vote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }] }, valueVote: [{ id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }], url: 'http://poll.loc:82/storage/22/cb22ff74-136d-413f-a9fa-182b803c6f06.jpeg', code: 8X76N515LN, category: { id: 4, name: Entertainment, created_at: null, updated_at: null }, user_id: null, poll_type_id: 2, open_to_everyone: 1, question: '333', close_date: '2021-08-02T00:00:00.000000Z', created_at: '2021-07-31T23:28:52.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }], items: { type: object } }
                                    message: { type: string, example: 'Polls retrieved successfully' }
            tags:
                - Poll
            security: []
        post:
            summary: 'Store a newly created Poll in storage.'
            description: 'POST /polls'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: veritatis
                                options:
                                    type: object
                                    description: ''
                                    example: []
                                    properties: { A: { type: string, description: '', example: illum }, B: { type: string, description: '', example: nostrum }, C: { type: string, description: '', example: illo }, D: { type: string, description: '', example: dolores }, E: { type: string, description: '', example: unde } }
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: yjacobson@example.org
                                category_id:
                                    type: integer
                                    description: ''
                                    example: 15
                                user_id:
                                    type: integer
                                    description: ''
                                    example: 13
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 14
                                open_to_everyone:
                                    type: string
                                    description: ''
                                    example: dolorem
                                question:
                                    type: string
                                    description: ''
                                    example: et
                                close_date:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - title
                                - category_id
                                - poll_type_id
                                - open_to_everyone
                                - question
            security: []
    '/api/polls/{poll}':
        get:
            summary: 'Display the specified Poll.'
            description: 'GET|HEAD /polls/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Poll not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Poll not found' }
            tags:
                - Poll
            security: []
        put:
            summary: 'Update the specified Poll in storage.'
            description: 'PUT/PATCH /polls/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: et
                                url:
                                    type: string
                                    description: ''
                                    example: voluptas
                                code:
                                    type: string
                                    description: ''
                                    example: voluptates
                                category_id:
                                    type: integer
                                    description: ''
                                    example: 12
                                user_id:
                                    type: integer
                                    description: ''
                                    example: 10
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 15
                                open_to_everyone:
                                    type: string
                                    description: ''
                                    example: eos
                                question:
                                    type: string
                                    description: ''
                                    example: blanditiis
                                close_date:
                                    type: string
                                    description: ''
                                    example: {  }
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - title
                                - code
                                - category_id
                                - poll_type_id
                                - open_to_everyone
                                - question
            security: []
        delete:
            summary: 'Remove the specified Poll from storage.'
            description: 'DELETE /polls/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            security: []
        parameters:
            -
                in: path
                name: poll
                description: ''
                example: et
                required: true
                schema:
                    type: string
    '/api/poll_options/byPoll/{id}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: []
                                    message: 'Poll retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [] }
                                    message: { type: string, example: 'Poll retrieved successfully' }
            tags:
                - 'Poll Option'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: molestiae
                required: true
                schema:
                    type: string
    /api/poll_options:
        get:
            summary: 'Display a listing of the PollOption.'
            description: 'GET|HEAD /pollOptions'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, counters: null, poll_id: 1, name: A, value: qq, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 2, counters: null, poll_id: 1, name: B, value: ww, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 3, counters: null, poll_id: 1, name: C, value: ee, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 4, counters: null, poll_id: 1, name: D, value: bb, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 5, counters: { counterable_id: 5, counter_id: 1, counterable_type: App\Models\PollOption, value: 3, id: 1 }, poll_id: 8, name: '1', value: '1', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 6, counters: { counterable_id: 6, counter_id: 1, counterable_type: App\Models\PollOption, value: 1, id: 3 }, poll_id: 8, name: '2', value: '2', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 7, counters: null, poll_id: 8, name: '3', value: '3', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 8, counters: null, poll_id: 8, name: '4', value: '4', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 9, counters: null, poll_id: 8, name: '5', value: '5', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }]
                                    message: 'Poll Options retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, counters: null, poll_id: 1, name: A, value: qq, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 2, counters: null, poll_id: 1, name: B, value: ww, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 3, counters: null, poll_id: 1, name: C, value: ee, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 4, counters: null, poll_id: 1, name: D, value: bb, count: 0, created_at: '2021-07-31T23:22:12.000000Z', updated_at: '2021-07-31T23:22:12.000000Z' }, { id: 5, counters: { counterable_id: 5, counter_id: 1, counterable_type: App\Models\PollOption, value: 3, id: 1 }, poll_id: 8, name: '1', value: '1', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 6, counters: { counterable_id: 6, counter_id: 1, counterable_type: App\Models\PollOption, value: 1, id: 3 }, poll_id: 8, name: '2', value: '2', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 7, counters: null, poll_id: 8, name: '3', value: '3', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 8, counters: null, poll_id: 8, name: '4', value: '4', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }, { id: 9, counters: null, poll_id: 8, name: '5', value: '5', count: 0, created_at: '2021-07-31T23:28:53.000000Z', updated_at: '2021-07-31T23:28:53.000000Z' }], items: { type: object } }
                                    message: { type: string, example: 'Poll Options retrieved successfully' }
            tags:
                - 'Poll Option'
            security: []
        post:
            summary: 'Store a newly created PollOption in storage.'
            description: 'POST /pollOptions'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Option'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: integer
                                    description: ''
                                    example: 17
                                name:
                                    type: string
                                    description: ''
                                    example: porro
                                value:
                                    type: string
                                    description: ''
                                    example: debitis
                                count:
                                    type: integer
                                    description: ''
                                    example: 18
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_id
                                - name
                                - value
                                - count
            security: []
    '/api/poll_options/{poll_option}':
        get:
            summary: 'Display the specified PollOption.'
            description: 'GET|HEAD /pollOptions/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Poll Option not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Poll Option not found' }
            tags:
                - 'Poll Option'
            security: []
        put:
            summary: 'Update the specified PollOption in storage.'
            description: 'PUT/PATCH /pollOptions/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Option'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: integer
                                    description: ''
                                    example: 17
                                name:
                                    type: string
                                    description: ''
                                    example: odio
                                value:
                                    type: string
                                    description: ''
                                    example: est
                                count:
                                    type: integer
                                    description: ''
                                    example: 2
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_id
                                - name
                                - value
                                - count
            security: []
        delete:
            summary: 'Remove the specified PollOption from storage.'
            description: 'DELETE /pollOptions/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Option'
            security: []
        parameters:
            -
                in: path
                name: poll_option
                description: ''
                example: nobis
                required: true
                schema:
                    type: string
    /api/poll_types:
        get:
            summary: 'Display a listing of the PollType.'
            description: 'GET|HEAD /pollTypes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, name: 'Yes / No', created_at: null, updated_at: null }, { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null }, { id: 3, name: 'A - E Options', created_at: null, updated_at: null }]
                                    message: 'Poll Types retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, name: 'Yes / No', created_at: null, updated_at: null }, { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null }, { id: 3, name: 'A - E Options', created_at: null, updated_at: null }], items: { type: object } }
                                    message: { type: string, example: 'Poll Types retrieved successfully' }
            tags:
                - 'Poll Type'
            security: []
        post:
            summary: 'Store a newly created PollType in storage.'
            description: 'POST /pollTypes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Type'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: sit
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
    '/api/poll_types/{poll_type}':
        get:
            summary: 'Display the specified PollType.'
            description: 'GET|HEAD /pollTypes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Poll Type not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Poll Type not found' }
            tags:
                - 'Poll Type'
            security: []
        put:
            summary: 'Update the specified PollType in storage.'
            description: 'PUT/PATCH /pollTypes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Type'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: rerum
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
        delete:
            summary: 'Remove the specified PollType from storage.'
            description: 'DELETE /pollTypes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Type'
            security: []
        parameters:
            -
                in: path
                name: poll_type
                description: ''
                example: accusantium
                required: true
                schema:
                    type: string
    /api/votes:
        get:
            summary: 'Display a listing of the Vote.'
            description: 'GET|HEAD /votes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:11.000000Z', updated_at: '2021-07-31T23:53:11.000000Z' }, { id: 2, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:16.000000Z', updated_at: '2021-07-31T23:53:16.000000Z' }, { id: 3, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:20.000000Z', updated_at: '2021-07-31T23:53:20.000000Z' }, { id: 4, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:25.000000Z', updated_at: '2021-07-31T23:53:25.000000Z' }]
                                    message: 'Votes retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:11.000000Z', updated_at: '2021-07-31T23:53:11.000000Z' }, { id: 2, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:16.000000Z', updated_at: '2021-07-31T23:53:16.000000Z' }, { id: 3, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:20.000000Z', updated_at: '2021-07-31T23:53:20.000000Z' }, { id: 4, poll_id: 8, unique_id: null, poll_value_id: null, created_at: '2021-07-31T23:53:25.000000Z', updated_at: '2021-07-31T23:53:25.000000Z' }], items: { type: object } }
                                    message: { type: string, example: 'Votes retrieved successfully' }
            tags:
                - Vote
            security: []
        post:
            summary: 'Store a newly created Vote in storage.'
            description: 'POST /votes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Vote
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: string
                                    description: ''
                                    example: tenetur
                                uuid:
                                    type: string
                                    description: ''
                                    example: et
                                value:
                                    type: string
                                    description: ''
                                    example: quia
                            required:
                                - poll_id
                                - value
            security: []
    '/api/votes/{vote}':
        get:
            summary: 'Display the specified Vote.'
            description: 'GET|HEAD /votes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Vote not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Vote not found' }
            tags:
                - Vote
            security: []
        put:
            summary: 'Update the specified Vote in storage.'
            description: 'PUT/PATCH /votes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Vote
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: string
                                    description: ''
                                    example: aut
                                uuid:
                                    type: string
                                    description: ''
                                    example: dicta
                                value:
                                    type: string
                                    description: ''
                                    example: quo
                            required:
                                - poll_id
                                - value
            security: []
        delete:
            summary: 'Remove the specified Vote from storage.'
            description: 'DELETE /votes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Vote
            security: []
        parameters:
            -
                in: path
                name: vote
                description: ''
                example: non
                required: true
                schema:
                    type: string
    /api/vote_values:
        get:
            summary: 'Display a listing of the VoteValue.'
            description: 'GET|HEAD /voteValues'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, poll_type_id: 1, name: 'Yes', value: 'Yes', created_at: null, updated_at: null }, { id: 2, poll_type_id: 1, name: 'No', value: 'No', created_at: null, updated_at: null }, { id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }, { id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }]
                                    message: 'Vote Values retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, poll_type_id: 1, name: 'Yes', value: 'Yes', created_at: null, updated_at: null }, { id: 2, poll_type_id: 1, name: 'No', value: 'No', created_at: null, updated_at: null }, { id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }, { id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }], items: { type: object } }
                                    message: { type: string, example: 'Vote Values retrieved successfully' }
            tags:
                - 'Vote Value'
            security: []
        post:
            summary: 'Store a newly created VoteValue in storage.'
            description: 'POST /voteValues'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Vote Value'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 5
                                name:
                                    type: string
                                    description: ''
                                    example: repellendus
                                value:
                                    type: string
                                    description: ''
                                    example: sed
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_type_id
                                - name
                                - value
            security: []
    '/api/vote_values/{vote_value}':
        get:
            summary: 'Display the specified VoteValue.'
            description: 'GET|HEAD /voteValues/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Vote Value not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Vote Value not found' }
            tags:
                - 'Vote Value'
            security: []
        put:
            summary: 'Update the specified VoteValue in storage.'
            description: 'PUT/PATCH /voteValues/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Vote Value'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 5
                                name:
                                    type: string
                                    description: ''
                                    example: molestiae
                                value:
                                    type: string
                                    description: ''
                                    example: est
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_type_id
                                - name
                                - value
            security: []
        delete:
            summary: 'Remove the specified VoteValue from storage.'
            description: 'DELETE /voteValues/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Vote Value'
            security: []
        parameters:
            -
                in: path
                name: vote_value
                description: ''
                example: porro
                required: true
                schema:
                    type: string
