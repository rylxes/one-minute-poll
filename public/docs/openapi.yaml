openapi: 3.0.3
info:
    title: 'One minute poll API Documentation'
    description: 'One minute poll API Documentation'
    version: 1.0.0
servers:
    -
        url: 'http://localhost'
paths:
    /api/login:
        post:
            summary: 'Handle a login request to the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: keira92@example.org
                                secret:
                                    type: string
                                    description: ''
                                    example: {  }
                                password:
                                    type: string
                                    description: ''
                                    example: aut
                            required:
                                - email
                                - password
            security: []
    /api/logout:
        post:
            summary: 'Log the user out of the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            security: []
        get:
            summary: 'Log the user out of the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: []
                                    message: 'Successful Logout'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [] }
                                    message: { type: string, example: 'Successful Logout' }
            tags:
                - Auth
            security: []
    /api/register:
        post:
            summary: 'Handle a registration request for the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                first_name:
                                    type: string
                                    description: ''
                                    example: laborum
                                last_name:
                                    type: string
                                    description: ''
                                    example: omnis
                                company_name:
                                    type: string
                                    description: ''
                                    example: qui
                                company_phone:
                                    type: string
                                    description: ''
                                    example: alias
                                company_description:
                                    type: string
                                    description: ''
                                    example: nihil
                                has2fa:
                                    type: boolean
                                    description: ''
                                    example: false
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: brock39@example.net
                                password:
                                    type: string
                                    description: ''
                                    example: accusamus
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: non
                            required:
                                - first_name
                                - last_name
                                - company_name
                                - company_phone
                                - email
                                - password
                                - password_confirmation
            security: []
    '/api/password/reset/{token}':
        get:
            summary: 'Display the password reset view for the given token.'
            description: 'If no token is present, display the link request form.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Whoops, looks like something went wrong'
                                    status: 500
                                properties:
                                    message: { type: string, example: 'Whoops, looks like something went wrong' }
                                    status: { type: integer, example: 500 }
            tags:
                - Auth
            security: []
        parameters:
            -
                in: path
                name: token
                description: ''
                example: tenetur
                required: true
                schema:
                    type: string
    /api/password/confirm:
        post:
            summary: 'Confirm the given user''s password.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            security: []
    '/api/email/verify/{id}/{hash}':
        get:
            summary: 'Mark the authenticated user''s email address as verified.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Auth
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: fugit
                required: true
                schema:
                    type: string
            -
                in: path
                name: hash
                description: ''
                example: eveniet
                required: true
                schema:
                    type: string
    /api/email/resend:
        post:
            summary: 'Resend the email verification notification.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            security: []
    /api/password/sendEmailLink:
        post:
            summary: 'Send a reset link to the given user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: jalyn74@example.com
                                base_url:
                                    type: string
                                    description: ''
                                    example: et
                            required:
                                - email
                                - base_url
            security: []
    /api/password/resetUser:
        post:
            summary: 'Reset the given user''s password.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                token:
                                    type: string
                                    description: ''
                                    example: ut
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: ullrich.grover@example.com
                                password:
                                    type: string
                                    description: ''
                                    example: quaerat
                            required:
                                - token
                                - email
                                - password
            security: []
    /api/registerInvite:
        post:
            summary: 'This is used to register an invited user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                company_id:
                                    type: string
                                    description: ''
                                    example: commodi
                                user_id:
                                    type: string
                                    description: ''
                                    example: {  }
                                is_user:
                                    type: boolean
                                    description: ''
                                    example: false
                                name:
                                    type: string
                                    description: ''
                                    example: cum
                                has2fa:
                                    type: boolean
                                    description: ''
                                    example: false
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: gardner.heller@example.net
                                password:
                                    type: string
                                    description: ''
                                    example: adipisci
                                password_confirmation:
                                    type: string
                                    description: ''
                                    example: numquam
                            required:
                                - company_id
                                - is_user
            security: []
    /api/password/change:
        post:
            summary: 'Change user''s password.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: berneice96@example.net
                                old_password:
                                    type: string
                                    description: ''
                                    example: quod
                                password:
                                    type: string
                                    description: ''
                                    example: quis
                            required:
                                - email
                                - old_password
                                - password
            security: []
    /api/categories:
        get:
            summary: 'Display a listing of the Category.'
            description: 'GET|HEAD /categories'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, name: 'General Opinion', created_at: null, updated_at: null }, { id: 2, name: Lifestyle, created_at: null, updated_at: null }, { id: 3, name: Politics, created_at: null, updated_at: null }, { id: 4, name: Entertainment, created_at: null, updated_at: null }, { id: 5, name: Sports, created_at: null, updated_at: null }, { id: 6, name: Technology, created_at: null, updated_at: null }]
                                    message: 'Categories retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, name: 'General Opinion', created_at: null, updated_at: null }, { id: 2, name: Lifestyle, created_at: null, updated_at: null }, { id: 3, name: Politics, created_at: null, updated_at: null }, { id: 4, name: Entertainment, created_at: null, updated_at: null }, { id: 5, name: Sports, created_at: null, updated_at: null }, { id: 6, name: Technology, created_at: null, updated_at: null }], items: { type: object } }
                                    message: { type: string, example: 'Categories retrieved successfully' }
            tags:
                - Category
            security: []
        post:
            summary: 'Store a newly created Category in storage.'
            description: 'POST /categories'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Category
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: sint
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
    '/api/categories/{category}':
        get:
            summary: 'Display the specified Category.'
            description: 'GET|HEAD /categories/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Category not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Category not found' }
            tags:
                - Category
            security: []
        put:
            summary: 'Update the specified Category in storage.'
            description: 'PUT/PATCH /categories/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Category
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: labore
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
        delete:
            summary: 'Remove the specified Category from storage.'
            description: 'DELETE /categories/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Category
            security: []
        parameters:
            -
                in: path
                name: category
                description: ''
                example: suscipit
                required: true
                schema:
                    type: string
    /oauth/authorize:
        get:
            summary: 'Authorize a client to access the user''s account.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Approve the authorization request.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        delete:
            summary: 'Deny the authorization request.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /oauth/token:
        post:
            summary: 'Authorize a client to access the user''s account.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /oauth/tokens:
        get:
            summary: 'Get all of the authorized tokens for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    '/oauth/tokens/{token_id}':
        delete:
            summary: 'Delete the given token.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: token_id
                description: ''
                example: possimus
                required: true
                schema:
                    type: string
    /oauth/token/refresh:
        post:
            summary: 'Get a fresh transient token cookie for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /oauth/clients:
        get:
            summary: 'Get all of the clients for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Store a new client.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    '/oauth/clients/{client_id}':
        put:
            summary: 'Update the given client.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        delete:
            summary: 'Delete the given client.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: client_id
                description: ''
                example: laborum
                required: true
                schema:
                    type: string
    /oauth/scopes:
        get:
            summary: 'Get all of the available scopes for the application.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /oauth/personal-access-tokens:
        get:
            summary: 'Get all of the personal access tokens for the authenticated user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Create a new personal access token for the user.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    '/oauth/personal-access-tokens/{token_id}':
        delete:
            summary: 'Delete the given token.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: token_id
                description: ''
                example: alias
                required: true
                schema:
                    type: string
    /api/user:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /home:
        get:
            summary: 'Show the application dashboard.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthorized
                                    status: 401
                                properties:
                                    message: { type: string, example: Unauthorized }
                                    status: { type: integer, example: 401 }
            tags:
                - Endpoints
            security: []
    /api/polls:
        get:
            summary: 'Display a listing of the Poll.'
            description: 'GET|HEAD /polls'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: []
                                    message: 'Polls retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [] }
                                    message: { type: string, example: 'Polls retrieved successfully' }
            tags:
                - Poll
            security: []
        post:
            summary: 'Store a newly created Poll in storage.'
            description: 'POST /polls'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: inventore
                                options:
                                    type: object
                                    description: ''
                                    example: []
                                    properties: { A: { type: string, description: '', example: omnis }, B: { type: string, description: '', example: fugiat }, C: { type: string, description: '', example: magnam }, D: { type: string, description: '', example: nam }, E: { type: string, description: '', example: vitae } }
                                email:
                                    type: string
                                    description: 'The value must be a valid email address.'
                                    example: dach.cornell@example.com
                                category_id:
                                    type: integer
                                    description: ''
                                    example: 12
                                user_id:
                                    type: integer
                                    description: ''
                                    example: 11
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 6
                                open_to_everyone:
                                    type: string
                                    description: ''
                                    example: eius
                                question:
                                    type: string
                                    description: ''
                                    example: aut
                                close_date:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - title
                                - category_id
                                - poll_type_id
                                - open_to_everyone
                                - question
            security: []
    '/api/polls/{poll}':
        get:
            summary: 'Display the specified Poll.'
            description: 'GET|HEAD /polls/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Poll not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Poll not found' }
            tags:
                - Poll
            security: []
        put:
            summary: 'Update the specified Poll in storage.'
            description: 'PUT/PATCH /polls/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: ''
                                    example: accusantium
                                url:
                                    type: string
                                    description: ''
                                    example: quod
                                code:
                                    type: string
                                    description: ''
                                    example: minima
                                category_id:
                                    type: integer
                                    description: ''
                                    example: 15
                                user_id:
                                    type: integer
                                    description: ''
                                    example: 14
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 20
                                open_to_everyone:
                                    type: string
                                    description: ''
                                    example: eius
                                question:
                                    type: string
                                    description: ''
                                    example: at
                                close_date:
                                    type: string
                                    description: ''
                                    example: {  }
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - title
                                - code
                                - category_id
                                - poll_type_id
                                - open_to_everyone
                                - question
            security: []
        delete:
            summary: 'Remove the specified Poll from storage.'
            description: 'DELETE /polls/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Poll
            security: []
        parameters:
            -
                in: path
                name: poll
                description: ''
                example: hic
                required: true
                schema:
                    type: string
    /api/poll_options:
        get:
            summary: 'Display a listing of the PollOption.'
            description: 'GET|HEAD /pollOptions'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: []
                                    message: 'Poll Options retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [] }
                                    message: { type: string, example: 'Poll Options retrieved successfully' }
            tags:
                - 'Poll Option'
            security: []
        post:
            summary: 'Store a newly created PollOption in storage.'
            description: 'POST /pollOptions'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Option'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: integer
                                    description: ''
                                    example: 20
                                name:
                                    type: string
                                    description: ''
                                    example: repellendus
                                value:
                                    type: string
                                    description: ''
                                    example: molestias
                                count:
                                    type: integer
                                    description: ''
                                    example: 9
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_id
                                - name
                                - value
                                - count
            security: []
    '/api/poll_options/{poll_option}':
        get:
            summary: 'Display the specified PollOption.'
            description: 'GET|HEAD /pollOptions/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Poll Option not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Poll Option not found' }
            tags:
                - 'Poll Option'
            security: []
        put:
            summary: 'Update the specified PollOption in storage.'
            description: 'PUT/PATCH /pollOptions/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Option'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: integer
                                    description: ''
                                    example: 19
                                name:
                                    type: string
                                    description: ''
                                    example: est
                                value:
                                    type: string
                                    description: ''
                                    example: aut
                                count:
                                    type: integer
                                    description: ''
                                    example: 14
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_id
                                - name
                                - value
                                - count
            security: []
        delete:
            summary: 'Remove the specified PollOption from storage.'
            description: 'DELETE /pollOptions/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Option'
            security: []
        parameters:
            -
                in: path
                name: poll_option
                description: ''
                example: fugit
                required: true
                schema:
                    type: string
    /api/poll_types:
        get:
            summary: 'Display a listing of the PollType.'
            description: 'GET|HEAD /pollTypes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, name: 'Yes / No', created_at: null, updated_at: null }, { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null }, { id: 3, name: 'A - E Options', created_at: null, updated_at: null }]
                                    message: 'Poll Types retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, name: 'Yes / No', created_at: null, updated_at: null }, { id: 2, name: '1 - 5 Stars', created_at: null, updated_at: null }, { id: 3, name: 'A - E Options', created_at: null, updated_at: null }], items: { type: object } }
                                    message: { type: string, example: 'Poll Types retrieved successfully' }
            tags:
                - 'Poll Type'
            security: []
        post:
            summary: 'Store a newly created PollType in storage.'
            description: 'POST /pollTypes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Type'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: itaque
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
    '/api/poll_types/{poll_type}':
        get:
            summary: 'Display the specified PollType.'
            description: 'GET|HEAD /pollTypes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Poll Type not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Poll Type not found' }
            tags:
                - 'Poll Type'
            security: []
        put:
            summary: 'Update the specified PollType in storage.'
            description: 'PUT/PATCH /pollTypes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Type'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: veniam
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - name
            security: []
        delete:
            summary: 'Remove the specified PollType from storage.'
            description: 'DELETE /pollTypes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Poll Type'
            security: []
        parameters:
            -
                in: path
                name: poll_type
                description: ''
                example: maiores
                required: true
                schema:
                    type: string
    /api/votes:
        get:
            summary: 'Display a listing of the Vote.'
            description: 'GET|HEAD /votes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: []
                                    message: 'Votes retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [] }
                                    message: { type: string, example: 'Votes retrieved successfully' }
            tags:
                - Vote
            security: []
        post:
            summary: 'Store a newly created Vote in storage.'
            description: 'POST /votes'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Vote
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: integer
                                    description: ''
                                    example: 15
                                unique_id:
                                    type: string
                                    description: ''
                                    example: labore
                                poll_value_id:
                                    type: integer
                                    description: ''
                                    example: 14
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_id
                                - poll_value_id
            security: []
    '/api/votes/{vote}':
        get:
            summary: 'Display the specified Vote.'
            description: 'GET|HEAD /votes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Vote not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Vote not found' }
            tags:
                - Vote
            security: []
        put:
            summary: 'Update the specified Vote in storage.'
            description: 'PUT/PATCH /votes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Vote
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_id:
                                    type: integer
                                    description: ''
                                    example: 13
                                unique_id:
                                    type: string
                                    description: ''
                                    example: sed
                                poll_value_id:
                                    type: integer
                                    description: ''
                                    example: 3
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_id
                                - poll_value_id
            security: []
        delete:
            summary: 'Remove the specified Vote from storage.'
            description: 'DELETE /votes/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Vote
            security: []
        parameters:
            -
                in: path
                name: vote
                description: ''
                example: tempora
                required: true
                schema:
                    type: string
    /api/vote_values:
        get:
            summary: 'Display a listing of the VoteValue.'
            description: 'GET|HEAD /voteValues'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: true
                                    data: [{ id: 1, poll_type_id: 1, name: 'Yes', value: 'Yes', created_at: null, updated_at: null }, { id: 2, poll_type_id: 1, name: 'No', value: 'No', created_at: null, updated_at: null }, { id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }, { id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }]
                                    message: 'Vote Values retrieved successfully'
                                properties:
                                    success: { type: boolean, example: true }
                                    data: { type: array, example: [{ id: 1, poll_type_id: 1, name: 'Yes', value: 'Yes', created_at: null, updated_at: null }, { id: 2, poll_type_id: 1, name: 'No', value: 'No', created_at: null, updated_at: null }, { id: 3, poll_type_id: 2, name: '1', value: '1', created_at: null, updated_at: null }, { id: 4, poll_type_id: 2, name: '2', value: '2', created_at: null, updated_at: null }, { id: 5, poll_type_id: 2, name: '3', value: '3', created_at: null, updated_at: null }, { id: 6, poll_type_id: 2, name: '4', value: '4', created_at: null, updated_at: null }, { id: 7, poll_type_id: 2, name: '5', value: '5', created_at: null, updated_at: null }, { id: 8, poll_type_id: 3, name: A, value: A, created_at: null, updated_at: null }, { id: 9, poll_type_id: 3, name: B, value: B, created_at: null, updated_at: null }, { id: 10, poll_type_id: 3, name: C, value: C, created_at: null, updated_at: null }, { id: 11, poll_type_id: 3, name: D, value: D, created_at: null, updated_at: null }, { id: 12, poll_type_id: 3, name: E, value: E, created_at: null, updated_at: null }], items: { type: object } }
                                    message: { type: string, example: 'Vote Values retrieved successfully' }
            tags:
                - 'Vote Value'
            security: []
        post:
            summary: 'Store a newly created VoteValue in storage.'
            description: 'POST /voteValues'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Vote Value'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 2
                                name:
                                    type: string
                                    description: ''
                                    example: voluptatum
                                value:
                                    type: string
                                    description: ''
                                    example: est
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_type_id
                                - name
                                - value
            security: []
    '/api/vote_values/{vote_value}':
        get:
            summary: 'Display the specified VoteValue.'
            description: 'GET|HEAD /voteValues/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    success: false
                                    message: 'Vote Value not found'
                                properties:
                                    success: { type: boolean, example: false }
                                    message: { type: string, example: 'Vote Value not found' }
            tags:
                - 'Vote Value'
            security: []
        put:
            summary: 'Update the specified VoteValue in storage.'
            description: 'PUT/PATCH /voteValues/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Vote Value'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                poll_type_id:
                                    type: integer
                                    description: ''
                                    example: 5
                                name:
                                    type: string
                                    description: ''
                                    example: molestiae
                                value:
                                    type: string
                                    description: ''
                                    example: est
                                created_at:
                                    type: string
                                    description: ''
                                    example: {  }
                                updated_at:
                                    type: string
                                    description: ''
                                    example: {  }
                            required:
                                - poll_type_id
                                - name
                                - value
            security: []
        delete:
            summary: 'Remove the specified VoteValue from storage.'
            description: 'DELETE /voteValues/{id}'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Vote Value'
            security: []
        parameters:
            -
                in: path
                name: vote_value
                description: ''
                example: dignissimos
                required: true
                schema:
                    type: string
